{"version":3,"sources":["components/Phonebook/Phonebook.js","components/Contacts/Contacts.js","components/Filter/Filter.js","App.js","index.js"],"names":["Phonebook","state","name","number","contactCreateList","contact","id","uuidv4","nameToCheck","toLowerCase","props","addContact","contactBase","isExist","map","alert","contactAdd","event","preventDefault","resetForm","addStatePropery","value","setState","handleInputChange","e","currentTarget","nameInputId","phoneInputId","onSubmit","this","htmlFor","type","pattern","title","required","onChange","Component","Contacts","contacts","deleteContact","onClick","Filter","filter","nameAdd","App","getVisibleContacts","normalizedFilter","includes","contactId","prevState","locasStorageContacts","localStorage","getItem","parsedContacts","JSON","parse","prevProps","nextContacts","setItem","stringify","visibleContact","Fragment","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6b114f2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n// uuidv4(); // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\r\n\r\nclass Phonebook extends Component {\r\n  state = { name: '', number: '' };\r\n\r\n  contactCreateList = () => {\r\n    const contact = {\r\n      id: uuidv4(),\r\n      name: this.state.name,\r\n      number: this.state.number,\r\n    };\r\n\r\n    const nameToCheck = contact.name.toLowerCase();\r\n    const { addContact, contactBase } = this.props;\r\n    let isExist = true;\r\n\r\n    contactBase.map(({ name }) => {\r\n      if (name.toLowerCase() === nameToCheck) {\r\n        isExist = false;\r\n        alert(`${name} is already added to your phonebook`);\r\n      }\r\n    });\r\n    if (isExist) {\r\n      addContact(contact);\r\n    }\r\n  };\r\n\r\n  contactAdd = event => {\r\n    event.preventDefault();\r\n    this.contactCreateList();\r\n    this.resetForm();\r\n  };\r\n\r\n  addStatePropery = (name, value) => {\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.addStatePropery(name, value);\r\n  };\r\n\r\n  resetForm = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const nameInputId = uuidv4();\r\n    const phoneInputId = uuidv4();\r\n\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.contactAdd}>\r\n          <label htmlFor={nameInputId}>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={this.handleInputChange}\r\n              value={this.state.name}\r\n              id={nameInputId}\r\n            />\r\n          </label>\r\n\r\n          <label htmlFor=\"phoneInputId\">\r\n            number\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              required\r\n              onChange={this.handleInputChange}\r\n              value={this.state.number}\r\n              id={phoneInputId}\r\n            />\r\n          </label>\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Phonebook;\r\n\r\n/* const Phonebook = ({\r\n  nameAdd,\r\n  addContact,\r\n  resetForm,\r\n  contactName,\r\n  phoneNumber,\r\n  title,\r\n}) => {\r\n  const contactAdd = event => {\r\n    event.preventDefault();\r\n    addContact();\r\n    resetForm();\r\n  };\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    nameAdd(name, value);\r\n  };\r\n\r\n  const nameInputId = uuidv4();\r\n  const phoneInputId = uuidv4();\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={contactAdd}>\r\n        <label htmlFor={nameInputId}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={handleInputChange}\r\n            value={contactName}\r\n            id={nameInputId}\r\n          />\r\n        </label>\r\n\r\n        <label htmlFor=\"phoneInputId\">\r\n          number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n            onChange={handleInputChange}\r\n            value={phoneNumber}\r\n            id={phoneInputId}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Phonebook;\r\n */\r\n","import React from 'react';\r\nimport styles from './Contacts.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst Contacts = ({ contacts, deleteContact }) => {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {contacts.map(({ id, name, number }) => {\r\n          return (\r\n            <li key={id}>\r\n              <p>\r\n                {name}: {number}\r\n              </p>\r\n              <button type=\"button\" onClick={() => deleteContact(id)}>\r\n                delete\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n","import React from 'react';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = ({ filter, nameAdd }) => {\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    nameAdd(name, value);\r\n  };\r\n\r\n  return (\r\n    <label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={handleInputChange}\r\n      ></input>\r\n      <br />\r\n      Find contacts by name\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Phonebook from './components/Phonebook';\nimport Contacts from './components/Contacts';\nimport Filter from './components/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const locasStorageContacts = localStorage.getItem('contactList');\n    const parsedContacts = JSON.parse(locasStorageContacts);\n\n    if (parsedContacts) {\n      this.setState({\n        contacts: parsedContacts,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n\n    if (prevContacts !== nextContacts) {\n      localStorage.setItem('contactList', JSON.stringify(nextContacts));\n    }\n  }\n\n  addContact = contact => {\n    this.setState(({ contacts }) => ({\n      contacts: [contact, ...contacts],\n    }));\n  };\n\n  addStatePropery = (name, value) => {\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  render() {\n    const visibleContact = this.getVisibleContacts();\n    return (\n      <React.Fragment>\n        <h1>Phonebook</h1>\n        <Phonebook\n          addContact={this.addContact}\n          contactBase={this.state.contacts}\n        />\n        <h2>Contacts</h2>\n        <Filter filter={this.state.filter} nameAdd={this.addStatePropery} />\n        <Contacts\n          contacts={visibleContact}\n          deleteContact={this.deleteContact}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}